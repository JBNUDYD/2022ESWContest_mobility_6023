{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, StringFormat, _dataFromString, _UploadTask, _FbsBlob, listAll, list, getMetadata, updateMetadata, getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nclass UploadTaskSnapshotCompat {\n  constructor(_delegate, task, ref) {\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  get bytesTransferred() {\n    return this._delegate.bytesTransferred;\n  }\n\n  get metadata() {\n    return this._delegate.metadata;\n  }\n\n  get state() {\n    return this._delegate.state;\n  }\n\n  get totalBytes() {\n    return this._delegate.totalBytes;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass UploadTaskCompat {\n  constructor(_delegate, _ref) {\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n\n  get snapshot() {\n    return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n  }\n\n  then(onFulfilled, onRejected) {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(new UploadTaskSnapshotCompat(snapshot, this, this._ref));\n      }\n    }, onRejected);\n  }\n\n  on(type, nextOrObserver, error, completed) {\n    let wrappedNextOrObserver = undefined;\n\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = taskSnapshot => nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref));\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next ? taskSnapshot => nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)) : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n\n    return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n  }\n\n}\n\nclass ListResultCompat {\n  constructor(_delegate, _service) {\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  get prefixes() {\n    return this._delegate.prefixes.map(ref => new ReferenceCompat(ref, this._service));\n  }\n\n  get items() {\n    return this._delegate.items.map(ref => new ReferenceCompat(ref, this._service));\n  }\n\n  get nextPageToken() {\n    return this._delegate.nextPageToken || null;\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nclass ReferenceCompat {\n  constructor(_delegate, storage) {\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  get name() {\n    return this._delegate.name;\n  }\n\n  get bucket() {\n    return this._delegate.bucket;\n  }\n\n  get fullPath() {\n    return this._delegate.fullPath;\n  }\n\n  toString() {\n    return this._delegate.toString();\n  }\n  /**\r\n   * @returns A reference to the object obtained by\r\n   * appending childPath, removing any duplicate, beginning, or trailing\r\n   * slashes.\r\n   */\n\n\n  child(childPath) {\n    const reference = _getChild(this._delegate, childPath);\n\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root() {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n  /**\r\n   * @returns A reference to the parent of the\r\n   * current object, or null if the current object is the root.\r\n   */\n\n\n  get parent() {\n    const reference = this._delegate.parent;\n\n    if (reference == null) {\n      return null;\n    }\n\n    return new ReferenceCompat(reference, this.storage);\n  }\n  /**\r\n   * Uploads a blob to this object's location.\r\n   * @param data - The blob to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  put(data, metadata) {\n    this._throwIfRoot('put');\n\n    return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n  }\n  /**\r\n   * Uploads a string to this object's location.\r\n   * @param value - The string to upload.\r\n   * @param format - The format of the string to upload.\r\n   * @returns An UploadTask that lets you control and\r\n   * observe the upload.\r\n   */\n\n\n  putString(value) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StringFormat.RAW;\n    let metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n    this._throwIfRoot('putString');\n\n    const data = _dataFromString(format, value);\n\n    const metadataClone = Object.assign({}, metadata);\n\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n\n    return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n  }\n  /**\r\n   * List all items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * This is a helper method for calling list() repeatedly until there are\r\n   * no more results. The default pagination size is 1000.\r\n   *\r\n   * Note: The results may not be consistent if objects are changed while this\r\n   * operation is running.\r\n   *\r\n   * Warning: listAll may potentially consume too many resources if there are\r\n   * too many results.\r\n   *\r\n   * @returns A Promise that resolves with all the items and prefixes under\r\n   *  the current storage reference. `prefixes` contains references to\r\n   *  sub-directories and `items` contains references to objects in this\r\n   *  folder. `nextPageToken` is never returned.\r\n   */\n\n\n  listAll() {\n    return listAll(this._delegate).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * List items (files) and prefixes (folders) under this storage reference.\r\n   *\r\n   * List API is only available for Firebase Rules Version 2.\r\n   *\r\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n   *\r\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n   * support objects whose paths end with \"/\" or contain two consecutive\r\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n   * list() may fail if there are too many unsupported objects in the bucket.\r\n   *\r\n   * @param options - See ListOptions for details.\r\n   * @returns A Promise that resolves with the items and prefixes.\r\n   * `prefixes` contains references to sub-folders and `items`\r\n   * contains references to objects in this folder. `nextPageToken`\r\n   * can be used to get the rest of the results.\r\n   */\n\n\n  list(options) {\n    return list(this._delegate, options || undefined).then(r => new ListResultCompat(r, this.storage));\n  }\n  /**\r\n   * A `Promise` that resolves with the metadata for this object. If this\r\n   * object doesn't exist or metadata cannot be retreived, the promise is\r\n   * rejected.\r\n   */\n\n\n  getMetadata() {\n    return getMetadata(this._delegate);\n  }\n  /**\r\n   * Updates the metadata for this object.\r\n   * @param metadata - The new metadata for the object.\r\n   * Only values that have been explicitly set will be changed. Explicitly\r\n   * setting a value to null will remove the metadata.\r\n   * @returns A `Promise` that resolves\r\n   * with the new metadata for this object.\r\n   * @see firebaseStorage.Reference.prototype.getMetadata\r\n   */\n\n\n  updateMetadata(metadata) {\n    return updateMetadata(this._delegate, metadata);\n  }\n  /**\r\n   * @returns A `Promise` that resolves with the download\r\n   * URL for this object.\r\n   */\n\n\n  getDownloadURL() {\n    return getDownloadURL(this._delegate);\n  }\n  /**\r\n   * Deletes the object at this location.\r\n   * @returns A `Promise` that resolves if the deletion succeeds.\r\n   */\n\n\n  delete() {\n    this._throwIfRoot('delete');\n\n    return deleteObject(this._delegate);\n  }\n\n  _throwIfRoot(name) {\n    if (this._delegate._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nclass StorageServiceCompat {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  get maxOperationRetryTime() {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime() {\n    return this._delegate.maxUploadRetryTime;\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference for the given path in the default\r\n   * bucket.\r\n   */\n\n\n  ref(path) {\n    if (isUrl(path)) {\n      throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n  /**\r\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n   * which must be a gs:// or http[s]:// URL.\r\n   */\n\n\n  refFromURL(url) {\n    if (!isUrl(url)) {\n      throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n    }\n\n    try {\n      _Location.makeFromUrl(url, this._delegate.host);\n    } catch (e) {\n      throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n    }\n\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time) {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time) {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(host, port) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n\n}\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n\nconst name = \"@firebase/storage-compat\";\nconst version = \"0.1.8\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(container, _ref2) {\n  let {\n    instanceIdentifier: url\n  } = _ref2;\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  const storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  const namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":{"version":3,"mappings":"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","names":["UploadTaskSnapshotCompat","constructor","_delegate","task","ref","bytesTransferred","metadata","state","totalBytes","UploadTaskCompat","_ref","cancel","bind","catch","pause","resume","snapshot","then","onFulfilled","onRejected","on","type","nextOrObserver","error","completed","wrappedNextOrObserver","undefined","taskSnapshot","next","complete","ListResultCompat","_service","prefixes","map","ReferenceCompat","items","nextPageToken","storage","name","bucket","fullPath","toString","child","childPath","reference","_getChild","root","parent","put","data","_throwIfRoot","uploadBytesResumable","putString","value","format","StringFormat","RAW","_dataFromString","metadataClone","contentType","_UploadTask","_FbsBlob","listAll","r","list","options","getMetadata","updateMetadata","getDownloadURL","delete","deleteObject","_location","path","_invalidRootOperation","StorageServiceCompat","app","maxOperationRetryTime","maxUploadRetryTime","isUrl","_invalidArgument","refFromURL","url","_Location","makeFromUrl","host","e","setMaxUploadRetryTime","time","setMaxOperationRetryTime","useEmulator","port","connectStorageEmulator","test","STORAGE_TYPE","factory","container","instanceIdentifier","getProvider","getImmediate","storageExp","identifier","storageServiceCompat","registerStorage","instance","namespaceExports","TaskState","TaskEvent","Storage","Reference","INTERNAL","registerComponent","Component","setServiceProps","setMultipleInstances","registerVersion","version","firebase"],"sources":["C:\\Users\\cwha0\\OneDrive\\바탕 화면\\Code\\2022ESWContest_mobility_6023\\web\\node_modules\\@firebase\\storage-compat\\src\\tasksnapshot.ts","C:\\Users\\cwha0\\OneDrive\\바탕 화면\\Code\\2022ESWContest_mobility_6023\\web\\node_modules\\@firebase\\storage-compat\\src\\task.ts","C:\\Users\\cwha0\\OneDrive\\바탕 화면\\Code\\2022ESWContest_mobility_6023\\web\\node_modules\\@firebase\\storage-compat\\src\\list.ts","C:\\Users\\cwha0\\OneDrive\\바탕 화면\\Code\\2022ESWContest_mobility_6023\\web\\node_modules\\@firebase\\storage-compat\\src\\reference.ts","C:\\Users\\cwha0\\OneDrive\\바탕 화면\\Code\\2022ESWContest_mobility_6023\\web\\node_modules\\@firebase\\storage-compat\\src\\service.ts","C:\\Users\\cwha0\\OneDrive\\바탕 화면\\Code\\2022ESWContest_mobility_6023\\web\\node_modules\\@firebase\\storage-compat\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot>\n{\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  StorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '@firebase/storage';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: StorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: StorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: StorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '@firebase/storage';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  UploadMetadata,\n  FullMetadata,\n  SettableMetadata,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob,\n  _dataFromString,\n  _invalidRootOperation\n} from '@firebase/storage';\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference>\n{\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as UploadMetadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: types.UploadMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = _dataFromString(format, value);\n    const metadataClone = { ...metadata };\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone as FullMetadata & { [k: string]: string }\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A `Promise` that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A `Promise` that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as SettableMetadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A `Promise` that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A `Promise` that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw _invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport {\n  ref,\n  connectStorageEmulator,\n  FirebaseStorage,\n  _Location,\n  _invalidArgument,\n  _FirebaseStorageImpl\n} from '@firebase/storage';\nimport { ReferenceCompat } from './reference';\nimport { Compat, EmulatorMockTokenOptions } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<FirebaseStorage>\n{\n  constructor(public app: FirebaseApp, readonly _delegate: FirebaseStorage) {}\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw _invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw _invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url, (this._delegate as _FirebaseStorageImpl).host);\n    } catch (e) {\n      throw _invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n\n  useEmulator(\n    host: string,\n    port: number,\n    options: {\n      mockUserToken?: EmulatorMockTokenOptions | string;\n    } = {}\n  ): void {\n    connectStorageEmulator(this._delegate, host, port, options);\n  }\n}\n\nfunction isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport firebase from '@firebase/app-compat';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  StringFormat,\n  _TaskEvent as TaskEvent,\n  _TaskState as TaskState\n} from '@firebase/storage';\n\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from '../package.json';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage-compat';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n  const storageExp = container\n    .getProvider('storage')\n    .getImmediate({ identifier: url });\n\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    storageExp\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as unknown as _FirebaseNamespace);\n\n/**\n * Define extension behavior for `registerStorage`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    storage?: {\n      (app?: FirebaseApp, url?: string): types.FirebaseStorage;\n      Storage: typeof types.FirebaseStorage;\n\n      StringFormat: {\n        BASE64: types.StringFormat;\n        BASE64URL: types.StringFormat;\n        DATA_URL: types.StringFormat;\n        RAW: types.StringFormat;\n      };\n      TaskEvent: {\n        STATE_CHANGED: types.TaskEvent;\n      };\n      TaskState: {\n        CANCELED: types.TaskState;\n        ERROR: types.TaskState;\n        PAUSED: types.TaskState;\n        RUNNING: types.TaskState;\n        SUCCESS: types.TaskState;\n      };\n    };\n  }\n  interface FirebaseApp {\n    storage?(storageBucket?: string): types.FirebaseStorage;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}